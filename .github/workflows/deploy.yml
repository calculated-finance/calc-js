name: Deploy Infrastructure & Applications

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production

permissions:
  id-token: write
  contents: read

jobs:
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: calc-worker
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/worker/Dockerfile
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    needs: build
    if: ${{ inputs.environment == 'staging' && github.event_name == 'push' || (inputs.environment == 'production' && github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production') }}

    defaults:
      run:
        working-directory: infrastructure

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.OIDC_ROLE_NAME }}
          role-session-name: GitHubActions-${{ inputs.environment }}
          aws-region: ap-southeast-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.0

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=calc-terraform-${{ inputs.environment }}" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="region=ap-southeast-1" \
            -backend-config="dynamodb_table=terraform-state-locks" \
            -backend-config="encrypt=true"

      - name: Get ECR Repository URI
        id: ecr
        run: |
          # Get or create ECR repository
          REPO_URI=$(aws ecr describe-repositories --repository-names calc-worker 2>/dev/null | jq -r '.repositories[0].repositoryUri' || echo "")
          if [ -z "$REPO_URI" ]; then
            echo "ECR repository not found, will be created by Terraform"
            REPO_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-southeast-1.amazonaws.com/calc-worker"
          fi
          echo "repository-uri=$REPO_URI" >> $GITHUB_OUTPUT

      - name: Build and Push Docker Image to ECR
        run: |
          # Login to ECR
          aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-southeast-1.amazonaws.com

          # Build and tag image
          IMAGE_TAG="${{ github.sha }}"
          FULL_IMAGE_URI="${{ steps.ecr.outputs.repository-uri }}:${IMAGE_TAG}"

          docker build -f packages/worker/Dockerfile -t $FULL_IMAGE_URI .
          docker push $FULL_IMAGE_URI

          # Also tag as latest for this environment
          docker tag $FULL_IMAGE_URI ${{ steps.ecr.outputs.repository-uri }}:${{ inputs.environment }}-latest
          docker push ${{ steps.ecr.outputs.repository-uri }}:${{ inputs.environment }}-latest

          echo "IMAGE_URI=$FULL_IMAGE_URI" >> $GITHUB_ENV

      - name: Update Secrets in AWS Secrets Manager
        run: |
          # Update the application secrets in AWS Secrets Manager
          SECRET_VALUE=$(cat <<EOF
          {
            "MNEMONIC": "${{ secrets.MNEMONIC }}",
            "CHAIN_ID": "${{ secrets.CHAIN_ID }}"
          }
          EOF
          )

          # Try to update existing secret, create if it doesn't exist
          aws secretsmanager update-secret \
            --secret-id calc-${{ inputs.environment }}-worker-secrets \
            --secret-string "$SECRET_VALUE" 2>/dev/null || \
          aws secretsmanager create-secret \
            --name calc-${{ inputs.environment }}-worker-secrets \
            --description "Secrets for CALC ${{ inputs.environment }} worker containers" \
            --secret-string "$SECRET_VALUE"

      - name: Terraform Plan
        run: |
          terraform plan \
            -var="environment=${{ inputs.environment }}" \
            -var="container_image=${{ env.IMAGE_URI }}" \
            -out=tfplan

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

      - name: Output Infrastructure Info
        run: |
          echo "## ðŸš€ Deployment Complete - ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Container Image**: ${{ env.IMAGE_URI }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Region**: ap-southeast-1" >> $GITHUB_STEP_SUMMARY
          echo "- **Terraform State**: calc-terraform-${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY

          # Get ECS cluster info
          CLUSTER_NAME=$(terraform output -raw cluster_name 2>/dev/null || echo "calc-${{ inputs.environment }}-cluster")
          echo "- **ECS Cluster**: $CLUSTER_NAME" >> $GITHUB_STEP_SUMMARY

          # Get service status
          aws ecs describe-services \
            --cluster $CLUSTER_NAME \
            --services calc-${{ inputs.environment }}-execute-triggers calc-${{ inputs.environment }}-sync-transactions \
            --query 'services[].{Name:serviceName,Status:status,Running:runningCount,Desired:desiredCount}' \
            --output table >> $GITHUB_STEP_SUMMARY || echo "Services not yet available" >> $GITHUB_STEP_SUMMARY
