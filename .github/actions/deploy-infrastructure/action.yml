name: "Deploy Infrastructure"
description: "Deploy CALC infrastructure to specified environment"
inputs:
  environment:
    description: "Environment to deploy (staging or production)"
    required: true
  aws-account-id:
    description: "AWS Account ID"
    required: true
  oidc-role-name:
    description: "OIDC Role Name for AWS authentication"
    required: true
  mnemonic:
    description: "Mnemonic for worker secrets"
    required: true
  chain-id:
    description: "Chain ID for worker secrets"
    required: true

runs:
  using: "composite"
  steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ inputs.aws-account-id }}:role/${{ inputs.oidc-role-name }}
        role-session-name: GitHubActions-${{ inputs.environment }}
        aws-region: ap-southeast-1

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.0

    - name: Terraform Init
      shell: bash
      run: |
        cd infrastructure
        terraform init -backend-config="bucket=calc-terraform-state-${{ inputs.environment }}"

    - name: Get ECR Repository URI
      id: ecr
      shell: bash
      run: |
        REPO_URI=$(aws ecr describe-repositories --repository-names calc-worker 2>/dev/null | jq -r '.repositories[0].repositoryUri' || echo "")
        if [ -z "$REPO_URI" ]; then
          echo "ECR repository not found, will be created by Terraform"
          REPO_URI="${{ inputs.aws-account-id }}.dkr.ecr.ap-southeast-1.amazonaws.com/calc-worker"
        fi
        echo "repository-uri=$REPO_URI" >> $GITHUB_OUTPUT

    - name: Build and Push Docker Image to ECR
      shell: bash
      run: |
        # Login to ECR
        aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin ${{ inputs.aws-account-id }}.dkr.ecr.ap-southeast-1.amazonaws.com

        # Build and tag image
        IMAGE_TAG="${{ github.sha }}"
        FULL_IMAGE_URI="${{ steps.ecr.outputs.repository-uri }}:${IMAGE_TAG}"

        docker build -f packages/worker/Dockerfile -t $FULL_IMAGE_URI .
        docker push $FULL_IMAGE_URI

        # Also tag as latest for this environment
        docker tag $FULL_IMAGE_URI ${{ steps.ecr.outputs.repository-uri }}:${{ inputs.environment }}-latest
        docker push ${{ steps.ecr.outputs.repository-uri }}:${{ inputs.environment }}-latest

        echo "IMAGE_URI=$FULL_IMAGE_URI" >> $GITHUB_ENV

    - name: Update Secrets in AWS Secrets Manager
      shell: bash
      run: |
        SECRET_VALUE=$(cat <<EOF
        {
          "MNEMONIC": "${{ inputs.mnemonic }}",
          "CHAIN_ID": "${{ inputs.chain-id }}"
        }
        EOF
        )

        # Try to update existing secret, create if it doesn't exist
        aws secretsmanager update-secret \
          --secret-id calc-${{ inputs.environment }}-worker-secrets \
          --secret-string "$SECRET_VALUE" 2>/dev/null || \
        aws secretsmanager create-secret \
          --name calc-${{ inputs.environment }}-worker-secrets \
          --description "Secrets for CALC ${{ inputs.environment }} worker containers" \
          --secret-string "$SECRET_VALUE"

    - name: Terraform Plan
      shell: bash
      run: |
        cd infrastructure
        terraform plan \
          -var="environment=${{ inputs.environment }}" \
          -var="container_image=${{ env.IMAGE_URI }}" \
          -out=tfplan

    - name: Terraform Apply
      shell: bash
      run: |
        cd infrastructure
        terraform apply -auto-approve tfplan

    - name: Output Infrastructure Info
      shell: bash
      run: |
        echo "## ðŸš€ Deployment Complete - ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Container Image**: ${{ env.IMAGE_URI }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Region**: ap-southeast-1" >> $GITHUB_STEP_SUMMARY
        echo "- **Terraform State**: calc-terraform-${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY

        # Get ECS cluster info
        cd infrastructure
        CLUSTER_NAME=$(terraform output -raw cluster_name 2>/dev/null || echo "calc-${{ inputs.environment }}-cluster")
        echo "- **ECS Cluster**: $CLUSTER_NAME" >> $GITHUB_STEP_SUMMARY

        # Get service status
        aws ecs describe-services \
          --cluster $CLUSTER_NAME \
          --services calc-${{ inputs.environment }}-execute-triggers calc-${{ inputs.environment }}-sync-transactions \
          --query 'services[].{Name:serviceName,Status:status,Running:runningCount,Desired:desiredCount}' \
          --output table >> $GITHUB_STEP_SUMMARY || echo "Services not yet available" >> $GITHUB_STEP_SUMMARY
