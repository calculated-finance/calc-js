name: "Deploy Infrastructure"
description: "Deploy CALC infrastructure to specified environment"
inputs:
  environment:
    description: "Environment to deploy (staging or production)"
    required: true
  aws-account-id:
    description: "AWS Account ID"
    required: true
  oidc-role-name:
    description: "OIDC Role Name for AWS authentication"
    required: true
  signer_mnemonics:
    description: "Comma-separated mnemonics for Lambda consumers (one per consumer)"
    required: true
  chain-id:
    description: "Chain ID for worker secrets"
    required: true

defaults:
  run:

runs:
  using: "composite"
  steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ inputs.aws-account-id }}:role/${{ inputs.oidc-role-name }}
        role-session-name: GitHubActions-${{ inputs.environment }}
        aws-region: ap-southeast-1

    - name: Download image artifact
      uses: actions/download-artifact@v4
      with:
        name: worker-image

    - name: Load image
      shell: bash
      run: |
        gunzip -c worker.${{ github.sha }}.tar.gz | docker load
        docker image ls

    - name: Login ECR
      shell: bash
      run: |
        aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin ${{ inputs.aws-account-id }}.dkr.ecr.ap-southeast-1.amazonaws.com

    - name: Tag & Push
      shell: bash
      run: |
        SRC=calc-worker:${{ github.sha }}
        BASE=${{ inputs.aws-account-id }}.dkr.ecr.ap-southeast-1.amazonaws.com/calc-worker:${{ github.sha }}
        docker tag $SRC $BASE
        docker push $BASE

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Setup pnpm
      uses: pnpm/action-setup@v3
      with:
        version: 9.10.0

    - name: Bundle lambda handler
      working-directory: packages/worker
      shell: bash
      run: pnpm run bundle

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.0

    - name: Terraform Init
      working-directory: packages/worker/infrastructure
      shell: bash
      run: terraform init -backend-config="bucket=calc-terraform-state-${{ inputs.environment }}"

    - name: Terraform Plan
      working-directory: packages/worker/infrastructure
      shell: bash
      run: |
        terraform plan \
          -var="environment=${{ inputs.environment }}" \
          -var="container_image=${{ inputs.aws-account-id }}.dkr.ecr.ap-southeast-1.amazonaws.com/calc-worker:${{ github.sha }}" \
          -var="signer_mnemonics=${{ inputs.signer_mnemonics }}" \
          -var="chain_id=${{ inputs.chain-id }}" \
          -out=tfplan

    - name: Terraform Apply
      working-directory: packages/worker/infrastructure
      shell: bash
      run: terraform apply -auto-approve tfplan

    - name: Output Infrastructure Info
      working-directory: packages/worker/infrastructure
      shell: bash
      run: |
        echo "## ðŸš€ Deployment Complete - ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Container Image**: ${{ inputs.aws-account-id }}.dkr.ecr.ap-southeast-1.amazonaws.com/calc-worker:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Region**: ap-southeast-1" >> $GITHUB_STEP_SUMMARY
        echo "- **Terraform State**: calc-terraform-${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY

        # Get ECS cluster info
        CLUSTER_NAME=$(terraform output -raw cluster_name 2>/dev/null || echo "calc-${{ inputs.environment }}-cluster")
        echo "- **ECS Cluster**: $CLUSTER_NAME" >> $GITHUB_STEP_SUMMARY

        # Get service status
        aws ecs describe-services \
          --cluster $CLUSTER_NAME \
          --services calc-${{ inputs.environment }}-producer \
          --query 'services[].{Name:serviceName,Status:status,Running:runningCount,Desired:desiredCount}' \
          --output table >> $GITHUB_STEP_SUMMARY || echo "Services not yet available" >> $GITHUB_STEP_SUMMARY
